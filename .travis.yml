# https://docs.travis-ci.com/user/job-lifecycle/


#- Run Multiple Jobs/Matrixes with different python versions,
#  -> Matrix Defined
#- Different Databases
#  -> Env Defined
#- Tox Jobs only Responsible for Testing
#- Main Environment - Latest Django, Runs Dev Environment  



language: python

env:
- DJANGO_DB=SQLITE
- DJANGO_DB=POSTGRES

cache: pip


python:
  - '3.8'
  - '3.7'
  - '3.6'

jobs:
  include:
    - stage: 'Testing'
    - name: 'Python 3.8 - Current Dev and Release'
      python: '3.8'
      env: DJANGO_DB=SQLITE
    - stage: Lint and Code Style
      python: 3.8
      env: TOXENV=flake8

#matrix:
#  include:
#  - name: "Linux, Python 3.7 - Postgres"
#    os: linux
#    dist: xenial
#    python: "3.7"
#    env: DJANGO_DB=POSTGRES
#    install: echo PHASE Linux, Python 3.7 - Postgres - install
#  - name: "Linux, Python 3.8 - Sqlite"
#    os: linux
#    dist: xenial
#    python: "3.8"
#    env: DJANGO_DB=SQLITE
#    install: echo PHASE Linux, Python 3.8 - Sqlite - install

#jobs:
#  fast_finish: true
#  include:
#    - python: "3.6"
#      env:
#      - TEST_PYTHON=3.6
#      - FORCE_FAIL=TRUE
#    - python: "3.7"
#      env: TEST_PYTHON=3.7
#    - python: "3.8"
#      env: TEST_PYTHON=3.8

#  allow_failures:
#    - if: env(TEST_PYTHON) = 3.6

before_install:
- echo PHASE - before_install
- printenv

install:
- echo PHASE - install

before_script:
- echo PHASE - before_script

script:
- echo PHASE - script
- if [ "$FORCE_FAIL" = "TRUE" ]; then exit 1; fi

after_success:
- echo PHASE - after_success

after_failure:
- echo PHASE - after_failure

before_deploy:
- echo PHASE - before_deploy

deploy:
- echo PHASE - deploy

after_deploy:
- echo PHASE - after_deploy
